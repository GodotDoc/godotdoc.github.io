[{"id":0,"href":"/docs/godot/","title":"Godot 入门","section":"Docs","content":"\rGDScript\r#\rGodot官方提供多种开发语言供开发者选择，如：GDScript、C# 、C/C++、其他。\nGDScript 是 Godot 专用的编程语言，具有设计简洁、学习曲线低、与Godot引擎紧密集成等优点，非常适合新手和独立开发者。\n如果你有其他面向对象语言开发基础，学习 GDScript 将会很快。\n代码\r#\rGDScript 代码长下面这个样子，先混个眼熟。\nextends Node2D # Called when the node enters the scene tree for the first time. func _ready(): pass # Replace with function body. # Called every frame. \u0026#39;delta\u0026#39; is the elapsed time since the previous frame. func _process(delta): pass "},{"id":1,"href":"/docs/godot/environment/","title":"GodotEngine 安装","section":"Godot 入门","content":"\r安装运行环境\r#\r工欲善其事必先利其器 ，学习 Godot 要先安装 Godot 游戏引擎。\n下载引擎\r#\r进入GodotEngine 官网\n你要使用最新版的就点击 Download Latest，要使用以前的版本就点击 previous version。\n下载 Godot 4.0\r#\r写此文的时候（2024-09-01）官方已经发布了 Godot4.3，但是本文将使用 Godot4.0 版本演示。读者可以根据自己的爱好选择版本，只要是 4.x 的版本在 GDScript 的使用上差别都不是特别大。\n如果你是新手，那么建议使用 4.x 以及以上的最新版本，如果你习惯使用 3.x 版本，那么你已经是老手，本文将会浪费你的宝贵时间。\n这里我们选择 Standard 标准版，如果是用 C# 开发的需要选择 .NET 版本。\n打开 Godot 4.0 新建项目\r#\r如果你是 windows 平台，将下载的压缩包解压后会看到两个文件。Godot_v4.0-stable_win64.exe 和 Godot_v4.0-stable_win64_console.exe，不用管其他的双击前者打开 Godot 引擎就行了（甚至不用安装），然后新建个项目名称随意。\n新建项目上方可以选择语言，如果默认不是中文可以在这里调整。 项目路径最好选择一个空的路径上没有中文和特殊字符的文件夹。 渲染器那三个选项可以默认的学习 GDScript 不用关心这个。 新建节点和脚本文件\r#\r新建完项目会自动打开，点击左侧的 2D 场景，新建一个写代码用的测试场景。\n在刚新建的 2D 场景上添加一个脚本，用于编写测试脚本。\n创建完成后会自动跳转到脚本编辑页面（此时还是未保存状态，可以按ctrl + s保存）。\n至此 GDScript 的运行环境已经安装完成了，读者可以在这里编写 GDScript 脚本了。\n附录\r#\r使用 Godot 编辑器\r#\rGodot 编辑器相较于 VSCode,Visual Studio 等非官方的编辑器还是相对比较简洁的。我们简单看一下。\n点击这里全屏显示 Godot 编辑器，沉浸式编写 GDScript 代码。 点击这里搜一些内置类、节点的使用文档（有中文哦，个人特别特别喜欢这个功能，非常有用）。 点击这里可以直接跳转到 Godot 的官方教程，不用再打开浏览器输入网址这么麻烦了。 这里列出了正打开的 GDScript 脚本文件。 这里列出了当前正在编辑的 GDScript 脚本中的方法，当一个方法比较多的时候，用这里可以快速找到某个方法。 Godot 节点和场景的区别\r#\r一个场景(Scene)是由一个节点树(Node Tree)构成的。每个场景需要有一个根节点(Root Node)和多个子节点(child node)。每个场景又可以当作其他场景的节点。（个人感觉节点跟场景是同一个东西，Godot万物皆节点，万物皆对象。）\nGodot 版本命名规范\r#\r如果你刚刚接触 Godot Engine ，你会发现它有很多版本。这是由于 Godot Engine 还在飞速发展中，所以版本更新会比较频繁。\n这里简单说一下 Godot Engine 的命名规范，以便读者可以选择自己适合的版本。\nGodot_vx.x-dev：开发版本，最早的版本，可以用来体验新功能。 Godot_vx.x-alpha：内测版，给内部人员测试用的，Bug多且功能也不全。 Godot_vx.x-beta：公测版，给一些非内部人员测试用，还有很多 BUG 还可能会增加新功能。 Godot_vx.x-rc：稳定版，功能已经稳定了（和stable一样）不再新添和减少功能，但还有些bug要修复。 Godot_vx.x-stable：稳定的最终发版，已知的严重bug都修复完了，正式项目一般用这个。 "},{"id":2,"href":"/docs/nodes/node2d/","title":"Node2d","section":"Godot节点手册","content":"\rNode2d\r#\r2D 游戏对象，具有变换（位置、旋转、缩放）等基本功能。所有的 2D 节点，包括物理对象和精灵，都继承自 Node2D。可以使用 Node2D 作为父节点来移动、缩放和旋转 2D 项目中的子节点。\n待完善\u0026hellip;\n"},{"id":3,"href":"/docs/case/platform_jump/","title":"平台跳跃游戏","section":"Godot 游戏案例","content":"\r平台跳跃游戏\r#\r待完善\u0026hellip;\n"},{"id":4,"href":"/docs/tips/pixel_game_setting/","title":"像素风格游戏配置","section":"Godot 小技巧","content":"\r像素风游戏配置\r#\r"},{"id":5,"href":"/docs/godot/basic_grammar/","title":"GDScript 语法参考","section":"Godot 入门","content":"\rGDScript 语法参考\r#\rGDScript 的语法很简单，下面通过一些案例帮助读者快速的入门 GDScript。\n本文默认读者至少有少许的编程经验，知道变量、常量、对象和类等词是什么意思。\n没有特殊说明，下文的代码都是在 func _ready(): 方法中编写的，然后点击右上角可以运行看效果。\n变量\r#\r变量是用于存储信息的\u0026quot;容器\u0026quot;，这个\u0026quot;容器\u0026quot;储存的数据可以在游戏运行时随时更改，使用 var 关键定义。\n# 定义一个叫 n 的变量 var n = 1 # 使用冒号和数据类型关键字手动声明变量类型 var n1 : int = 1 # 可以省略类型关键字，系统会自动推断 var n2 : = 1 # 修改变量值 n = 2 n1 = 2 n2 = 2 是否声明变量类型根据自己喜好来。笔者觉得声明变量类型使用起来比较方便，不声明类型代码看起来简洁。\n常量\r#\r常量是在游戏运行时无法更改的值，使用关键字 const 定义。\n# 常量就是定义了就不能修改的数据\u0026#34;容器\u0026#34; const A = 1 注释\r#\r注释是用来给程序员看的\u0026quot;代码\u0026quot;，不会被系统编译，相当于代码的备忘录，使用关键字 #。\n# 这里就是一条注释，可以理解为代码的备忘录，程序运行的时候，会把这行删掉。 var n = 1 const N = 1 从 Godot4.2 开始，可以使用双井号 ## 注释。\n双井号注释被称为\u0026quot;文档注释\u0026quot;，可以像官方注释一样生成代码文档，也可以在检查器(Inspector)中鼠标悬停显示注释内容。\nextends Node2D ## 这是个变量的文档注释 @export var a = 1 ## 这是个函数上的文档注释 func test_function(): pass 数据类型\r#\rGodot 内置一些数据类型，分为基本数据类型(int、float、String、bool等)和对象数据类型(Dictionary、Array等)。基本数据类型在当作参数传递的时候是\u0026quot;按值传递\u0026quot;。对象数据类型在当作参数传递的时候是\u0026quot;引用传递\u0026quot;。\n数字类型\r#\r整数类型\r#\rvar n = 1 var n1 : int = 2 int 存储的是 64 位值，等效于 C++ 中的 int64_t\n浮点数类型\r#\rvar f = 1.1 var f1 :float = 1.2 float 存储的是 64 位值，等效于 C++ 中的 double。\n字符类型\r#\rvar s = \u0026#34;Hello Godot!\u0026#34; var s1 : String = \u0026#34;Hello Godot!\u0026#34; 布尔类型\r#\rvar b = false var b1 : bool = true 默认使用 Unicode 字符。\n字典类型\r#\rvar dict = {\u0026#34;key\u0026#34;: \u0026#34;value\u0026#34;, 2: 3} var dict1 : Dictionary = {key = \u0026#34;value\u0026#34;, other_key = 2} # 返回该字典中键为 key 的值 var v1 = dict.get(\u0026#34;key\u0026#34;) print(v1) # 输出 value # 如果字典中没有名为 key1 的键，返回 null var v2 = dict.get(\u0026#34;key1\u0026#34;) print(v2) # 输出 null # 不存在的时候返回某个默认值 var v3 = dict.get(\u0026#34;key1\u0026#34;,\u0026#34;default value\u0026#34;) print(v3) # 输出 default value # 合并两个字典 dict.merge(dict1) # 将 dict1 中的值合并到 dict 中 var v4 = dict.get(\u0026#34;other_key\u0026#34;) print(v4) # 输出 2 # 移除键值 dict.erase(\u0026#34;other_key\u0026#34;) var v5 = dict.get(\u0026#34;other_key\u0026#34;) print(v5) # 输出 null # 添加键值 dict[\u0026#34;other_key\u0026#34;] = \u0026#34;new_value\u0026#34; var v6 = dict.get(\u0026#34;other_key\u0026#34;) print(v6) # 输出 new_value # 更新某个键的值 dict[\u0026#34;other_key\u0026#34;] = \u0026#34;updated_value\u0026#34; var v7 = dict.get(\u0026#34;other_key\u0026#34;) print(v7) # 输出 updated_value 字典的值类型可以是任何类型。\n数组\r#\rvar arr = [1, 2, 3] var arr1 : Array = [\u0026#34;string1\u0026#34;,\u0026#34;string2\u0026#34;,\u0026#34;string3\u0026#34;] # 添加值 arr.append(4) print(arr) # 输出：[1, 2, 3, 4] # 更新 arr[0] = -1 # 将索引为 0 位置的值改成 -1 print(arr) # 输出：[-1, 2, 3, 4] # 取某个位置的值 var v1 = arr[1] print(v1) # 输出：2 # 移除某个值 arr.remove_at(0) # 移除索引为 0 位置的值 print(arr) # 输出：[2, 3, 4] # 合并数组 arr.append_array(arr1) print(arr) # 输出：[2, 3, 4, \u0026#34;string1\u0026#34;, \u0026#34;string2\u0026#34;, \u0026#34;string3\u0026#34;] 数组设置类型\r#\r上面的例子可以看出默认的 Array 类型是可以储存不同的数据类型，如果想只存某种类型可以使用“类型化数组”。\n# 只能存 int 类型 var a: Array[int] # 只能存 Node 类型 var b: Array[Node] # 只能存某种枚举类型 var d: Array[MyEnum] Array 等价于 Array[Varaint]\n压缩数组\r#\r如果读者需要使用数组存储较多的值（数万个），建议使用压缩数组。压缩数组可以避免了内存碎片，从而降低内存的使用量。但是压缩数组比普通的数组性能要低一点，所以不建议在使用小数据集的时候使用压缩数据。\nvar arr : PackedInt64Array = [1,2,3] print(arr) # 输出：[1, 2, 3] var arr1 : PackedStringArray = [\u0026#34;string1\u0026#34;,\u0026#34;string2\u0026#34;,\u0026#34;string3\u0026#34;] print(arr1) # 输出：[\u0026#34;string1\u0026#34;, \u0026#34;string2\u0026#34;, \u0026#34;string3\u0026#34;] PackedByteArray：字节（从 0 到 255 的整数）数组。 PackedInt32Array：32位整数数组。 PackedInt64Array：64位整数数组。 PackedFloat32Array：32位浮点数数组。 PackedFloat64Array：64位浮点数数组。 PackedStringArray：字符串数组。 PackedVector2Array：Vector2 类型的数组。 PackedVector3Array：Vector3 类型的数组。 PackedColorArray：Color 类型的数组。 运算\r#\r数值运算\r#\rvar n1 = 1 var n2 = 2 # 加 var n3 = n1 + n2 print(n3) # 输出 3 # 减 var n4 = n1 - n2 print(n4) # 输出 -1 # 乘 var n5 = n1 * n2 print(n5) # 输出 2 # 除 var n6 = 1.0 / 2.0 print(n6) # 输出 0.5 # 取余 var n7 = 10 % 3 print(n7) # 输出 1 枚举\r#\rextends Node2D # 匿名枚举类型 enum {UNIT_NEUTRAL, UNIT_ENEMY, UNIT_ALLY} # 一个名称为 Name 的枚举 enum Name {THING_1, THING_2, ANOTHER_THING = -1} func _ready(): print(UNIT_NEUTRAL) # 输出：0 print(Name.THING_1) # 输出：0 print(Name.ANOTHER_THING) # 输出：-1 枚举类型实际上存的的是就是数字类型，一些地方使用枚举类型可以提高性能和可维护性。\n循环语句\r#\r条件语句\r#\r类型转换\r#\r函数/方法\r#\r对象和类\r#\r构建函数\r#\r"},{"id":6,"href":"/docs/tips/","title":"Godot 小技巧","section":"Docs","content":"\rGodot 游戏引擎一些小技巧\r#\r"},{"id":7,"href":"/docs/nodes/tilemaplayer/","title":"TileMapLayer","section":"Godot节点手册","content":"\rTileMapLayer\r#\rTileMapLayer 是 Godot4.3 新增的节点，用于替换旧版本的 TileMap 节点（tilemap已经从4.3开始被废弃）。\nTileMapLayer 与 TileMap 用法上差不多，可以理解为后者是前者的一个集合，也就是 TileMap 有多层，而 TileMapLayer 只有一层。\nTileMap\r#\r"},{"id":8,"href":"/docs/case/","title":"Godot 游戏案例","section":"Docs","content":"\rGodot 游戏案例\r#\r平台跳跃游戏\r#\r待完善\u0026hellip;\n2D RGB游戏\r#\r待完善\u0026hellip;\n3D FPS 游戏\r#\r待完善\u0026hellip;\n类八方旅人游戏\r#\r待完善\u0026hellip;\n"},{"id":9,"href":"/docs/nodes/tween/","title":"Tween","section":"Godot节点手册","content":"\rTween\r#\rTween【/twiːn/ 在……之间】是用于创建“补间动画”的类。\n如果笔者想在 Godot 中创建一个动画，可能首先会想到用 AnimationPlayer 或者 AnimatedSprite/2D 来创建，但是这两个必须在编辑器里事先设置好动画。\n对于一些未知的动画，需要在代码中创建的简单动画，就可以使用 Tween 。而且 Tween 更轻量级，性能更好。\n案例\r#\r在此案例中，我们使用 Tween 将下列的序列帧生成动画。\n创建 Sprite2D 节点。 将动画资源设置到 texture 上（这里要把hframes设置成6，图中没体现出来）。 给 Sprite2D 添加代码。 在 func _ready(): 中编写代码，创建动画。 代码如下：\nfunc _ready(): # 创建 tween var tween = create_tween() # 设置重复次数，这个方法如果不传数字则代表循环无限次 tween.set_loops() # 将 sprite2D 的 frame 从默认值（0）变成 5，中间的 1，2，3，4 由 tween 自动补充 # self 指的是当前的脚本所属的 sprite2D 节点对象 tween.tween_property(self,\u0026#34;frame\u0026#34;,5,0.3) # 上面的动画播放完，调用 reset_frame 将 frame 设置成0，供下次循环使用 tween.tween_callback(reset_frame) # 将 sprite2D 的 frame 帧属性设置成0 func reset_frame() : frame = 0 参考\r#\r一些用 Tween 实现小动画参考。\n移动动画\r#\r# 1s 将节点从当前位置沿 x 轴向左移动 100 个单位。 var tween = create_tween() tween.tween_property(self,\u0026#34;position\u0026#34;,self.position + Vector2(100,0),1) # 1s 将节点从当前位置沿 y 轴向下移动 100 个单位。 var tween = create_tween() tween.tween_property(self,\u0026#34;position\u0026#34;,self.position + Vector2(0,100),1) 旋转动画\r#\r# 1s 顺时针旋转 180 度 var tween = create_tween() tween.tween_property(self,\u0026#34;rotation\u0026#34;,Vector2(-1,0).angle(),1) # 1s 逆时针旋转 180 度 var tween = create_tween() tween.tween_property(self,\u0026#34;rotation\u0026#34;,- Vector2(-1,0).angle(),1) 这里 Vector2(-1,0).angle() 是根据向量计算角度。如果使用小数，可能会得到意料之外的结果。\n淡入淡出动画\r#\r# 1s 淡出 var tween = create_tween() tween.tween_property(self,\u0026#34;modulate\u0026#34;,Color.TRANSPARENT,1) # 1s 淡入 var tween = create_tween() tween.tween_property(self,\u0026#34;modulate\u0026#34;,Color.WHITE,1) 方法调用\r#\r可以用 tween 调用方法，补间的值就是函数的传参。\nfunc _process(delta): # 按下空格键， tween 会调用 test_func 方法 # 传的 x 参数是 0-1 if Input.is_action_just_pressed(\u0026#34;ui_accept\u0026#34;): var tween = create_tween() tween.tween_method(test_func, 0, 10, 1) # 打印 x func test_func(x : float) -\u0026gt; void: print(x) 动画结束回调函数\r#\rfunc _process(delta): if Input.is_action_just_pressed(\u0026#34;ui_accept\u0026#34;): var tween = create_tween() # 1s 向右移动 10个单位 tween.tween_property(self,\u0026#34;position\u0026#34;,self.position + Vector2(10,0),1) # 动画结束调用 tween_finished tween.tween_callback(tween_finished) func tween_finished() -\u0026gt; void: print(\u0026#34;tween finished!\u0026#34;) 参考及资源\r#\r官方教程\n像素资源-Animated Pixel Adventurer\n"},{"id":10,"href":"/docs/nodes/","title":"Godot节点手册","section":"Docs","content":"\rGodot Engine 节点\r#\r"}]